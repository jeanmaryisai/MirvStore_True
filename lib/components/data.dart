import 'dart:async';
import 'dart:math';

// import 'package:flutter/material.dart';

import 'package:uuid/uuid.dart';

import '../models/Product.dart';
import '../models/chat.dart';
import '../models/comment.dart';
import '../models/followers.dart';
import '../models/message.dart';
import '../models/notifs.dart';
import '../models/post.dart';
import '../models/trade.dart';
import '../models/user.dart';
import '../utils.dart';

Random random = Random();
List names = [
  "Blake Bird",
  "Avery Howell",
  "Dexter Ward",
  "Hunter Bradley",
  "Bill Buckley",
  "Vera Marsh",
  "Ruth Burton",
  "Carmen Blake",
  "Paige Lawrence",
  "Geneva Mccoy",
  "Cecilia Abbott",
];

List hash = [
  "#love, #instagood, #me",
  "#tbt, #cute, #follow, #followme",
  "Lenard Milton",
  "#photooftheday, #happy, #tagforlikes, #beautiful",
  "#self, #girl, #picoftheday, #like4like",
  "Guadalupe Ratledge",
  "#smile, #friends, #fun",
  "#food, #swag, #amazing, #tflers",
  "#style, #wcw, #family",
  "#pretty, #repost, #hair",
  "#girls, #all_shots, #party",
];

List<String> titles = [
  "La Joconde",
  "La Nuit √©toil√©e",
  "Les Tournesols",
  "Guernica",
  "La C√®ne",
  "Les Demoiselles d'Avignon",
  "Le Cri",
  "Les Nymph√©as",
  "Les Pers√©ides",
  "Les Amoureux",
  "La Libert√© guidant le peuple",
  "La Grande Vague de Kanagawa",
  "Les M√©nines",
  "La Persistance de la m√©moire",
  "Les Raboteurs de parquet",
  "Les Trois Musiciens",
  "Les Danseuses Bleues",
  "Le Baiser",
  "La Danse",
  "Les Amants",
];

List<User> users =[User(
myId: Uuid().v4(),
profile: "assets/images/dm${random.nextInt(4)}.jpg",
username: names[0],
password: 'admin')];
List<User> users2 = List.generate(
    11,
    (index) => User(
        myId: Uuid().v4(),
        profile: "assets/images/dm${random.nextInt(4)}.jpg",
        username: names[index],
        password: 'admin'));
StreamController<List<User>> usersStream = StreamController<List<User>>.broadcast();

List messages = [
  "I am a traveler",
  "Are you available tomorrow?",
  "It's late. Go to bed!",
  "I know what I want - Confidence",
  "I work in an office",
  "The last rocketüöÄ",
  "I do NOT work in an office",
  "Will you be attending the meetup tomorrow?",
  "Are you angry at something?",
  "I am a bit of a bright spark - Intelligence",
  "Can i hear your voice?",
];

List<String> descriptions = [
  "Une c√©l√®bre peinture de Leonardo da Vinci repr√©sentant le portrait √©nigmatique d'une femme avec un sourire myst√©rieux.",
  "Une peinture embl√©matique de Vincent van Gogh illustrant un ciel nocturne tourbillonnant rempli d'√©toiles brillantes.",
  "Une s√©rie de peintures de tournesols r√©alis√©es par Vincent van Gogh, repr√©sentant des bouquets lumineux de cette fleur embl√©matique.",
  "Une peinture de Pablo Picasso d√©peignant les horreurs de la guerre et de la violence.",
  "Une fresque de Leonardo da Vinci repr√©sentant le dernier repas de J√©sus avec ses disciples.",
  "Une ≈ìuvre r√©volutionnaire de Pablo Picasso marquant le d√©but du mouvement cubiste dans l'art.",
  "Une c√©l√®bre peinture d'Edvard Munch repr√©sentant un visage criant d'angoisse et de d√©sespoir.",
  "Une s√©rie de peintures de Claude Monet d√©peignant les magnifiques nymph√©as dans son jardin √† Giverny.",
  "Une peinture abstraite de Jackson Pollock capturant l'√©nergie et le mouvement des √©toiles filantes.",
  "Une ≈ìuvre romantique de Marc Chagall repr√©sentant un couple d'amoureux flottant dans les airs.",
  "Une peinture r√©volutionnaire d'Eug√®ne Delacroix repr√©sentant la Libert√© guidant le peuple lors de la R√©volution fran√ßaise.",
  "Une c√©l√®bre estampe japonaise d'Hokusai repr√©sentant une grande vague d√©ferlante sur la c√¥te de Kanagawa.",
  "Un tableau embl√©matique de Diego Vel√°zquez repr√©sentant la famille royale espagnole dans un grand salon.",
  "Une peinture surr√©aliste de Salvador Dal√≠ repr√©sentant des montres molles et d√©form√©es.",
  "Un tableau r√©aliste de Gustave Caillebotte d√©peignant des ouvriers en train de raboter un parquet.",
  "Une ≈ìuvre cubiste de Pablo Picasso repr√©sentant trois musiciens dans des formes g√©om√©triques.",
  "Des danseuses peintes par Edgar Degas avec des robes et des chapeaux bleus √©voquant la gr√¢ce et le mouvement.",
  "Une sculpture embl√©matique d'Auguste Rodin repr√©sentant un couple s'embrassant passionn√©ment.",
  "Une s√©rie de peintures de Henri Matisse d√©peignant des figures dansantes dans des couleurs vives et audacieuses.",
  "Un tableau de Ren√© Magritte montrant deux amants s'embrassant avec des draps qui cachent leur visage.",
];
double? getdouble(int index) {
  return index % 2 == 0 ? random.nextDouble() * 10000 : null;
}

List<Product> products = List.generate(
    20,
    (index) => Product(
       myId: Uuid().v4(),
        title: titles[index],
        description: descriptions[index],
        image: "assets/images/dm${random.nextInt(4)}.jpg",
        owner: users[random.nextInt(10)],
        // owner: currentUser,
        staticPrice: getdouble(index)));
StreamController<List<Product>> productsStream = StreamController<List<Product>>.broadcast();

List<NotificationCustom> notifs = [
  NotificationCustom(
     myId: Uuid().v4(),
    receiver: currentUser,
    isAbout: getUserByName(names[random.nextInt(10)]),
    message:
        "${names[random.nextInt(10)]} and ${random.nextInt(100)} others liked your post",
  ),
  NotificationCustom(
    receiver: currentUser,
     myId: Uuid().v4(),
    isAbout: getUserByName(names[random.nextInt(10)]),
    message: "${names[random.nextInt(10)]} mentioned you in a comment",
  ),
  NotificationCustom( myId: Uuid().v4(),
    receiver: currentUser,
    isAbout: getUserByName(names[random.nextInt(10)]),
    message: "${names[random.nextInt(10)]} shared your post",
  ),
  NotificationCustom( myId: Uuid().v4(),
    receiver: currentUser,
    isAbout: getUserByName(names[random.nextInt(10)]),
    message: "${names[random.nextInt(10)]} commented on your post",
  ),
  NotificationCustom(
    receiver: currentUser, myId: Uuid().v4(),
    isAbout: getUserByName(names[random.nextInt(10)]),
    message: "${names[random.nextInt(10)]} replied to your comment",
  ),
  NotificationCustom(
    receiver: currentUser, myId: Uuid().v4(),
    isAbout: getUserByName(names[random.nextInt(10)]),
    message: "${names[random.nextInt(10)]} reacted to your comment",
  ),
  NotificationCustom(
    receiver: currentUser, myId: Uuid().v4(),
    isAbout: getUserByName(names[random.nextInt(10)]),
    message: "${names[random.nextInt(10)]} asked you to join a GroupÔ∏è",
  ),
  NotificationCustom(
    receiver: currentUser, myId: Uuid().v4(),
    isAbout: getUserByName(names[random.nextInt(10)]),
    message: "${names[random.nextInt(10)]} asked you to like a page",
  ),
  NotificationCustom(
    receiver: currentUser, myId: Uuid().v4(),
    isAbout: getUserByName(names[random.nextInt(10)]),
    message: "You have memories with ${names[random.nextInt(10)]}",
  ),
  NotificationCustom(
    receiver: currentUser, myId: Uuid().v4(),
    isAbout: getUserByName(names[random.nextInt(10)]),
    message:
        "${names[random.nextInt(10)]} Tagged you and ${random.nextInt(100)} others in a post",
  ),
  NotificationCustom(
    receiver: currentUser, myId: Uuid().v4(),
    isAbout: getUserByName(names[random.nextInt(10)]),
    message: "${names[random.nextInt(10)]} Sent you a friend request",
  ),
];

StreamController<List<NotificationCustom>> notificationsStream = StreamController<List<NotificationCustom>>.broadcast();

String defaultimg='';
// List<Trade> trades=
List<Post> posts =[];

List<Post> posts2 = List.generate(
    11,
    (index) => Post(
          author: getUserByName(names[random.nextInt(10)])!, myId: Uuid().v4(),
          caption: messages[random.nextInt(10)],
          product: products[random.nextInt(18)],
          isRepost: random.nextBool(),
          liked:List.generate(6, (index) => users[random.nextInt(10)])
        ));
StreamController<List<Post>> postsStream = StreamController<List<Post>>.broadcast();


List<Message> messagesGenerales = List.generate(
    10,
    (index) => Message( myId: Uuid().v4(),
        message: messages[random.nextInt(10)],
        send: DateTime.now(),
        sender: index % 2 == 0 ? currentUser : users[3],
        trade: index % 3 == 0 ? trades[random.nextInt(5)] : null));

List<Chat> chats = List.generate(
    3,
    (index) => Chat( myId: Uuid().v4(),
        messages: List.generate(
            10,
            (index) => Message( myId: Uuid().v4(),
                message: messages[random.nextInt(10)],
                send: DateTime.now(),
                sender: index % 2 == 0 ? currentUser : users[3],
                trade: index % 3 == 0 ? trades[random.nextInt(5)] : null)),
        user1: currentUser,
        user2: users[index]));

StreamController<List<Chat>> chatsStream = StreamController<List<Chat>>.broadcast();

List<Trade> trades = List.generate(
    6,
    (index) => Trade( myId: Uuid().v4(),
        amout: random.nextDouble() * 100000,
        sender: index % 2 == 0 ? currentUser : users[3],
        receiver: index % 2 == 1 ? currentUser : users[3],
        isAccepted: null,
        product: products[index],
        created: DateTime.now(),
        buyer: currentUser));


List<Followers> followersGenerale = [
  Followers(first: currentUser, myId: Uuid().v4(), followedBack: users[0], isFollowBack: true),
  Followers(first: currentUser, myId: Uuid().v4(), followedBack: users[1], isFollowBack: false),
  Followers(first: currentUser, myId: Uuid().v4(), followedBack: users[2], isFollowBack: true),
  Followers(first: currentUser, myId: Uuid().v4(), followedBack: users[4], isFollowBack: false),
  Followers(first: currentUser, followedBack: users[5], myId: Uuid().v4(), isFollowBack: true),
  Followers(first: currentUser, followedBack: users[6], myId: Uuid().v4(), isFollowBack: true),
  Followers(first: currentUser, followedBack: users[7], myId: Uuid().v4(), isFollowBack: true),
  Followers(first: currentUser, followedBack: users[8], myId: Uuid().v4(), isFollowBack: true),
  Followers(first: users[9], followedBack: currentUser,  myId: Uuid().v4(),isFollowBack: false),
  Followers(first: users[10], followedBack: currentUser, myId: Uuid().v4(), isFollowBack: true)
];

List<Comment> comments=List.generate(
  50, (index) => Comment( myId: Uuid().v4(),
    comment:messages[random.nextInt(10)],
    author:users[random.nextInt(10)], 
    post:posts[random.nextInt(10)],
    created: DateTime.now().subtract(Duration(minutes: random.nextInt(20))
  )));

StreamController<List<Comment>> commentsStream = StreamController<List<Comment>>.broadcast();


User currentUser = users[0];

enum quota {
  Like,
  Followed,
  Comment,
}

extension quotaValue on quota {
  int get value {
    switch (this) {
      case quota.Like:
        return 40;
      case quota.Followed:
        return 330;
      case quota.Comment:
        return 300;
    }
  }
}